set nocompatible               " be iMproved
" Set Environment to be inside .config/vim/
set directory=$XDG_CACHE_HOME/vim,~/,/tmp
set backupdir=$XDG_CACHE_HOME/vim,~/,/tmp
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"

set encoding=utf-8
filetype off                   " required!
set relativenumber " make jumping easier
set number         " find error lines even with above on
set ignorecase
set smartcase " psuedo case insensitive search
set incsearch " faster finding
set scrolloff=15
set shell=/bin/zsh
set mouse=a

set spell
setlocal spell spelllang=en_us " set spell checking
" zg to add word to word list
" zw to reverse
" zug to remove word from word list
" z= to get list of possibilities
set spellfile=~/.config/vim/spellfile.add
" fix mis-spelled highlighting
highlight clear SpellBad
highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
highlight clear SpellCap
highlight SpellCap term=underline cterm=underline
highlight clear SpellRare
highlight SpellRare term=underline cterm=underline
highlight clear SpellLocal
highlight SpellLocal term=underline cterm=underline
set dict+=~/dicTest.dic 

" set cursorline   " where am I?
" set cursorcolumn " where am I?
if &term =~ "xterm\\|rxvt"
  " use an orange cursor in insert mode
  let &t_SI = "\<Esc>]12;orange\x7"
  " use a red cursor otherwise
  let &t_EI = "\<Esc>]12;red\x7"
  silent !echo -ne "\033]12;red\007"
  " reset cursor when vim exits
  autocmd VimLeave * silent !echo -ne "\033]112\007"
  " use \003]12;gray\007 for gnome-terminal
endif



" set copy paste shortcuts to system clipboard
" nnoremap <leader>s :w<cr>
" vnoremap <leader>s :w<cr>
set clipboard=unnamedplus
nnoremap <leader>p "+gP
vnoremap <leader>p "+gP
nnoremap <leader>y "+y
vnoremap <leader>y "+y
nmap <silent> ,/ :nohlsearch<CR>

set showcmd " show the keys being pressed
:let mapleader = "," " change leader key to ,

" Setup bundles
set rtp+=~/.config/vim/bundle/Vundle.vim
call vundle#begin("/home/bertabus/.config/vim/bundle/")
Plugin 'gmarik/Vundle.vim'

" create shortcuts for easy compiling/running
Plugin 'xuhdev/SingleCompile'
:map <leader>r :SCCompileRun<cr> 
:map <leader>m :SCCompile<cr>
:map <leader>v :SCViewResult<cr>

" Provide html/xml tag support
Plugin 'Valloric/MatchTagAlways'

" commenter that works exactly as needed
Plugin 'tomtom/tcomment_vim'
:map <leader>c gcc<esc>

" better than command-t?
" Have used CLI and awesome/ZSH for new file finding
" Bundle 'kien/ctrlp.vim'
" map <leader>t :CtrlP<cr>
" let g:ctrlp_working_path_mode = 'ra'

" check common syntax errors, very useful
Plugin 'scrooloose/syntastic'

" add Bundle for Go files
Plugin 'fatih/vim-go'

" Track the engine for snippets.
Plugin 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'

"" Ultisnips use Control t and b/w to move around
let g:UltiSnipsExpandTrigger="<c-t>"
let g:UltiSnipsListSnippets="<c-s-tab>"
let g:UltiSnipsJumpForwardTrigger="<c-w>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"

" use a tab completion engine
Plugin 'Valloric/YouCompleteMe'
let g:ycm_path_to_python_interpreter = '/usr/bin/python2' " Arch uses python3
let g:ycm_collect_identifiers_from_comments_and_strings = 1

" Use to surround text with stuff, for "hello" use cs"' to get 'hello'
" For visual mode make selection and use S" to surround with quotes
" you can use `"' or (){}[]<> or t for tag with the tag ie. S<div>
Plugin 'tpope/vim-surround'

" git integration with fugitive, give :Gdiff :Gstatus :Gcommit 
Plugin 'tpope/vim-fugitive'

Plugin 'reedes/vim-wordy'
Plugin 'reedes/vim-litecorrect'
Plugin 'reedes/vim-textobj-quote'
Plugin 'kana/vim-textobj-user'
Plugin 'beloglazov/vim-online-thesaurus'
Plugin 'gmarik/vundle'
call vundle#end()            " required
filetype plugin indent on    " required

augroup text_files
  autocmd!
  autocmd FileType markdown call textobj#quote#init()
  autocmd FileType textile call textobj#quote#init()
  autocmd FileType rst call textobj#quote#init()
  autocmd FileType tex call textobj#quote#init()
  " autocmd!
  autocmd FileType markdown call litecorrect#init()
  autocmd FileType textile call litecorrect#init()
  autocmd FileType rst call litecorrect#init()
  autocmd FileType tex call litecorrect#init()
augroup END

let g:wordy#ring = [
  \ 'weak',
  \ ['being', 'passive-voice', ],
  \ 'business-jargon',
  \ 'weasel',
  \ 'puffery',
  \ ['problematic', 'redundant', ],
  \ ['colloquial', 'idiomatic', 'similies', ],
  \ ['off'],]
" # ~/.config/vim/bundle/vim-wordy/data/en/off.dic
" # off - just a blank dictionary that allows you to cycle through
" # the rings to turn off wordy.
" /encoding=utf-8

nnoremap <silent> <leader>w :NextWordy<cr>
nnoremap <leader>t :OnlineThesaurusCurrentWord<cr>
nnoremap W ]s
nnoremap B [s
" set directory to current file
set autochdir

" Recognize Arduino Files
au BufNewFile,BufRead *.ino set filetype=cpp

" set python indenting to match PEP8
autocmd filetype python setlocal ts=4 sts=4 sw=4 textwidth=80 
" Auto format python files on Save
" autocmd FileType python autocmd BufWritePre <buffer> ???

" Set html indentation
autocmd FileType javascript,html,css,php,htmldjango setlocal sw=2 ts=2 sts=2
" :au FileType xml,html,htmldjango autocmd :%!tidy
" autocmd BufWritePost *.py execute "!tidy % %" | e

set smarttab
set expandtab

" set a custom status line
" from https://github.com/spf13/spf13-vim/blob/master/.vimrc
if has('statusline')
  set laststatus=2
  " Broken down into easily includeable segments
  set statusline=%<%f\    " Filename
  set statusline+=%w%h%m%r " Options
  set statusline+=%{fugitive#statusline()} "  Git Hotness
  set statusline+=\ [%{&ff}/%Y]            " filetype
  set statusline+=\ [%{getcwd()}]          " current dir
  set statusline+=%#warningmsg#
  set statusline+=%{SyntasticStatuslineFlag()}
  set statusline+=%*
  let g:syntastic_enable_signs=1
  set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
endif
syntax on
filetype plugin indent on     " required!



" testing setting single compile from shebang
fun! s:DetectNode()
    if getline(1) == '#!/usr/bin/env pypy'
        :map <leader>r :!exec ./%<\n> 
        :map <leader>m :SCCompile<cr>
        :map <leader>v :SCViewResult<cr>
        " call s:SCChooseCompiler 1<\r>
    endif
endfun
autocmd BufNewFile,BufRead * call s:DetectNode()

